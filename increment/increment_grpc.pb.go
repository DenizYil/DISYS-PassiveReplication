// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package increment

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IncrementorClient is the client API for Incrementor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IncrementorClient interface {
	Increment(ctx context.Context, in *IncrementRequest, opts ...grpc.CallOption) (*IncrementResponse, error)
	Uptime(ctx context.Context, in *UptimeRequest, opts ...grpc.CallOption) (*UptimeResponse, error)
}

type incrementorClient struct {
	cc grpc.ClientConnInterface
}

func NewIncrementorClient(cc grpc.ClientConnInterface) IncrementorClient {
	return &incrementorClient{cc}
}

func (c *incrementorClient) Increment(ctx context.Context, in *IncrementRequest, opts ...grpc.CallOption) (*IncrementResponse, error) {
	out := new(IncrementResponse)
	err := c.cc.Invoke(ctx, "/increment.Incrementor/Increment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *incrementorClient) Uptime(ctx context.Context, in *UptimeRequest, opts ...grpc.CallOption) (*UptimeResponse, error) {
	out := new(UptimeResponse)
	err := c.cc.Invoke(ctx, "/increment.Incrementor/Uptime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IncrementorServer is the server API for Incrementor service.
// All implementations must embed UnimplementedIncrementorServer
// for forward compatibility
type IncrementorServer interface {
	Increment(context.Context, *IncrementRequest) (*IncrementResponse, error)
	Uptime(context.Context, *UptimeRequest) (*UptimeResponse, error)
	mustEmbedUnimplementedIncrementorServer()
}

// UnimplementedIncrementorServer must be embedded to have forward compatible implementations.
type UnimplementedIncrementorServer struct {
}

func (UnimplementedIncrementorServer) Increment(context.Context, *IncrementRequest) (*IncrementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Increment not implemented")
}
func (UnimplementedIncrementorServer) Uptime(context.Context, *UptimeRequest) (*UptimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Uptime not implemented")
}
func (UnimplementedIncrementorServer) mustEmbedUnimplementedIncrementorServer() {}

// UnsafeIncrementorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IncrementorServer will
// result in compilation errors.
type UnsafeIncrementorServer interface {
	mustEmbedUnimplementedIncrementorServer()
}

func RegisterIncrementorServer(s grpc.ServiceRegistrar, srv IncrementorServer) {
	s.RegisterService(&Incrementor_ServiceDesc, srv)
}

func _Incrementor_Increment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncrementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IncrementorServer).Increment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/increment.Incrementor/Increment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IncrementorServer).Increment(ctx, req.(*IncrementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Incrementor_Uptime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UptimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IncrementorServer).Uptime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/increment.Incrementor/Uptime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IncrementorServer).Uptime(ctx, req.(*UptimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Incrementor_ServiceDesc is the grpc.ServiceDesc for Incrementor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Incrementor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "increment.Incrementor",
	HandlerType: (*IncrementorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Increment",
			Handler:    _Incrementor_Increment_Handler,
		},
		{
			MethodName: "Uptime",
			Handler:    _Incrementor_Uptime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "increment/increment.proto",
}
